on:
    push:
        branches: [ master, testing ]

    pull_request:
    schedule:
      - cron: '2 8 3,18 * *'

name: Build/Check/Deploy to PyPI

jobs:
    pypi:
        name: Build on manylinux2014
        runs-on: ubuntu-latest
        strategy:
            matrix:
                cfg:
                    - { python: '/opt/python/cp38-cp38',    pyver: '3.8',  deploydoc: 'yes', deployextra: 'sdist' }
                    - { python: '/opt/python/cp39-cp39',    pyver: '3.9',  deploydoc: 'no',  deployextra: ''      }
                    - { python: '/opt/python/cp310-cp310',  pyver: '3.10', deploydoc: 'no',  deployextra: ''      }
                    - { python: '/opt/python/cp311-cp311',  pyver: '3.11', deploydoc: 'no',  deployextra: ''      }
        container:
            image: quay.io/pypa/manylinux2014_x86_64:2023-07-29-8793e83
        steps:
            - name: Checkout git repository
              uses: actions/checkout@v2
              with:
                path: _src/

            - name: Fetch tags
              shell: bash
              run: |
                pushd _src
                git fetch --depth=1 origin +refs/tags/*:refs/tags/*
                popd

            - name: Prepare VM
              env:
                PYTHON: ${{ matrix.cfg.python }}/bin/python3
              shell: bash
              run: |
                export PATH="${{ matrix.cfg.python }}/bin:/usr/lib64/openmpi/bin/:${PATH}"
                yum install -y openmpi-devel
                $PYTHON -m pip install auditwheel cython cibuildwheel matplotlib mpi4py nose numpy scipy sphinx sphinx_rtd_theme twine
                mkdir -p ~/.config/matplotlib
                cp _src/doc/matplotlibrc ~/.config/matplotlib

            - name: Build and install and run tests
              env:
                PYTHON:         ${{ matrix.cfg.python }}/bin/python3
                PYPMC_MPI_NPROC: 1
              shell: bash
              run: |
                export PATH="${{ matrix.cfg.python }}/bin:/usr/lib64/openmpi/bin/:${PATH}"
                pushd _src
                export NOSETESTS=nosetests
                export PYPMC_MPI_ARGS=--allow-run-as-root
                make install
                make check
                popd

            - name: Build and deploy documentation
              env:
                PYTHON:         ${{ matrix.cfg.python }}/bin/python3
                PYPMC_MPI_NPROC: 1
                PYPMC_ACCESS_TOKEN: "${{ secrets.PYPMC_ACCESS_TOKEN }}"
                PYPMC_DEPLOY_DOC: "${{ matrix.cfg.deploydoc }}"
              shell: bash
              run: |
                export PATH="${{ matrix.cfg.python }}/bin:${PATH}"
                pushd _src
                make doc
                if ! [[ ${PYPMC_DEPLOY_DOC} == "yes" ]] ; then
                    echo "Skipping documentation deployment due to configuration"
                    exit 0
                fi
                if [[ -z ${PYPMC_ACCESS_TOKEN} ]] ; then
                    echo "Skipping documentation deployment due to missing access token"
                    exit 0
                fi
                mkdir _doc
                git clone -o gh "https://pypmc:${PYPMC_ACCESS_TOKEN}@github.com/pypmc/pypmc.github.io" _doc
                cp -a doc/_build/html/* _doc/
                pushd _doc
                git config user.email ""
                git config user.name  "GitHub Actions"
                git add --all
                git commit --allow-empty -m "Updating documentation based on PyPMC revision ${{ github.sha }}"
                git push
                popd
                popd

            - name: Build distributions and deploy to PyPI
              env:
                PYTHON:         ${{ matrix.cfg.python }}/bin/python3
                TWINE_USERNAME: ${{ secrets.PYPI_USER     }}
                TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
                PYPMC_DEPLOY_EXTRA: "${{ matrix.cfg.deployextra }}"
              shell: bash
              run: |
                pushd _src
                $PYTHON setup.py bdist_wheel ${PYPMC_DEPLOY_EXTRA}
                auditwheel repair --plat "manylinux2014_x86_64" -w dist dist/*.whl
                rm -f  dist/*-linux_x86_64.whl dist/*.egg
                # check if this is not a tagged commit, and exit immediatly if true.
                if ! git describe --abbrev=0 --tags --exact-match HEAD &> /dev/null ; then exit 0 ; fi
                # upload source distributions and wheels
                $PYTHON -m twine upload dist/*
                popd

            - name: Upload distributions as artifact
              uses: actions/upload-artifact@v1
              with:
                name: pypmc-dists-manylinux2014-${{ matrix.cfg.pyver }}-${{ github.sha }}
                path: _src/dist/
